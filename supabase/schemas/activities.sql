-- Daily activity entries per goal

create table if not exists public.activities (
  id bigint generated by default as identity primary key,
  goal_id uuid not null references public.goals(id) on delete cascade,
  "date" date not null,
  completed boolean not null default true,
  notes text,
  value integer,
  unit text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (goal_id, "date")
);

create index if not exists activities_goal_date_idx on public.activities using btree (goal_id, "date");

-- updated_at trigger
drop trigger if exists activities_set_updated_at on public.activities;
create trigger activities_set_updated_at
before update on public.activities
for each row execute function public.set_updated_at();

-- RLS: enable and policies
alter table public.activities enable row level security;

do $$
begin
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='activities' and policyname='select_own_activities'
  ) then
    create policy "select_own_activities" on public.activities
      for select using (
        exists (
          select 1 from public.goals g
          where g.id = public.activities.goal_id and g.user_id = auth.uid()
        )
      );
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='activities' and policyname='insert_own_activities'
  ) then
    create policy "insert_own_activities" on public.activities
      for insert with check (
        exists (
          select 1 from public.goals g
          where g.id = public.activities.goal_id and g.user_id = auth.uid()
        )
      );
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='activities' and policyname='update_own_activities'
  ) then
    create policy "update_own_activities" on public.activities
      for update using (
        exists (
          select 1 from public.goals g
          where g.id = public.activities.goal_id and g.user_id = auth.uid()
        )
      );
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='activities' and policyname='delete_own_activities'
  ) then
    create policy "delete_own_activities" on public.activities
      for delete using (
        exists (
          select 1 from public.goals g
          where g.id = public.activities.goal_id and g.user_id = auth.uid()
        )
      );
  end if;
end $$;


